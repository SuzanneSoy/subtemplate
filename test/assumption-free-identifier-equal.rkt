#lang racket
(define-for-syntax outer #f)
(define-for-syntax inner #f)
(let ([x 1])
  (define-syntax (capture1 stx)
    (set! outer #'x)
    #'(void))
  (capture1)
  (let ([x 2])
    (define-syntax (capture2 stx)
    (set! inner #'x)
      #'(void))
    (capture2)
    (let ([y 3])
      (define-syntax (compare stx)
        (define candidate (datum->syntax #'y 'x))
        (displayln (free-identifier=? candidate inner))
        (displayln (free-identifier=? candidate outer))
        #'(void))
      (compare))))